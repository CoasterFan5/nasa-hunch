// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  UNVERIFIED_TEACHER
  TEACHER
  ORG_ADMIN
  HUNCH_ADMIN
}

enum MFA {
  ENABLED
  PENDING
  DISABLED
}

// Competition categories
model Category {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  color String @db.VarChar(6)
  icon String @db.VarChar(255)
  deadline DateTime
  projectTemplates ProjectTemplate[]
}

model Organization {
  id      Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  users User[]
  projects Project[]
  locations Location[]
}

model Location {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  address String @db.VarChar(255)
  city String @db.VarChar(255)
  state String @db.VarChar(255)
  zip String @db.VarChar(255)
  coordinates String @db.VarChar(255)
  organization Organization @relation(fields: [orgId], references: [id])
  orgId Int
}

model Session {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  lastUsed DateTime @default(now())
  sessionText String
  userId String
  user User @relation(fields: [userId], references: [id])
  ip String
  userAgent String
}

model User {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  email String @db.VarChar(255) @unique
  hash String @db.VarChar(1000)
  salt String @db.VarChar(255)
  secret String @db.VarChar(52)
  mfa Boolean @default(false)
  pfp String?
  role Role?
  sessions Session[]
  organization Organization? @relation(fields: [orgId], references: [id])
  orgId Int?
  projectUser ProjectUser[]
  inbox Notification[] @relation("receiver")
  outbox Notification[] @relation("sender")
  blogPosts BlogPost[]
  invites Invite[] @relation("from")
  invitations Invite[] @relation("to")
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId String
  sender User @relation("sender", fields: [senderId], references: [id])
  receiverId String
  receiver User @relation("receiver", fields: [receiverId], references: [id])
  title String @db.VarChar(255)
  message String @db.Text
}

enum ProjectUserPermission {
  NEEDS_APPROVAL
  EDITOR
  VIEWER
}

model ProjectUser {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  projectId String
  owner Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  project Project @relation("users", fields: [projectId], references: [id])
  voteSubmit Boolean @default(false)
  permission ProjectUserPermission
  assignments ToDoAssignee[]
  checkedToDoItems ToDoItem[]
}

model Project {
  id String @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organization Organization @relation(fields: [orgId], references: [id])
  orgId Int
  users ProjectUser[] @relation("users")
  files ProjectFile[]
  joinCode Int @unique
  projectTemplateId Int
  projectTemplate ProjectTemplate @relation(fields: [projectTemplateId], references: [id])
  toDoItems ToDoItem[]
  submissionDate DateTime?
  submitted Boolean @default(false)
  contactTeamMembers TeamMember[]
}

model ProjectTemplate { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  shortDescription String @db.Text
  description String
  deadline DateTime
  category Category[]
  projects Project[]
  files ProjectTemplateFile[]
}

// project management items
model File {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  key String? @db.VarChar(255)
  link String @db.VarChar(255)
  size Int @default(0)

  projectFiles ProjectFile[]
  templateFiles ProjectTemplateFile[]
}

model ProjectFile {
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  fileId Int
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([projectId, fileId])
}

model ProjectTemplateFile {
  templateId Int
  template ProjectTemplate @relation(fields: [templateId], references: [id])
  fileId Int
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([templateId, fileId])
}

model ToDoItem {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  checked Boolean
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  checkedById String?
  checkedBy ProjectUser? @relation(fields: [checkedById], references: [id], onDelete: SetNull)
  assignees ToDoAssignee[]
}

model ToDoAssignee {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  toDoItemId Int
  toDoItem ToDoItem @relation(fields: [toDoItemId], references: [id], onDelete: Cascade)
  userId String
  projectUser ProjectUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @db.VarChar(255)
  slug String @db.VarChar(255)
  summary String
  content String @db.Text
  authorId String
  author User @relation(fields: [authorId], references: [id])
}

model TeamMember {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  role String @db.VarChar(255)
  email String? @db.VarChar(255)
  pfp String
  phone String? @db.VarChar(255)
  projects Project[]
}

model Partner {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  logo String @db.VarChar(255)
  website String @db.VarChar(255)
}

model Invite {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromId String
  from User @relation("from", fields: [fromId], references: [id], onDelete: Cascade)

  role Role

  // Any additional information attatched when they recieve the invite
  form String @db.Text

  toId String
  to User? @relation("to", fields: [toId], references: [id], onDelete: SetNull)

  used Boolean @default(false)
}
