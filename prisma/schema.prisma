// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  UNVERIFIED_TEACHER
  TEACHER
  SCHOOL_ADMIN
  HUNCH_ADMIN
}

// Competition categories
model Category {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  color String @db.VarChar(6)
  icon String @db.VarChar(255)
  deadline DateTime
  projectTemplates ProjectTemplate[]
}

model Organization {
  id      Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  users User[]
  projects Project[]
}

model Session {
  id Int @id @default(autoincrement())
  sessionText String
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String @db.VarChar(255)
  lastName String @db.VarChar(255)
  email String @db.VarChar(255) @unique
  hash String @db.VarChar(1000)
  salt String @db.VarChar(255)
  pfp String?
  role Role?
  sessions Session[]
  organization Organization? @relation(fields: [orgId], references: [id])
  orgId Int?
  projectUser ProjectUser[]
  inbox Notification[] @relation("reciever")
  outbox Notification[] @relation("sender")
  blogPosts BlogPost[]
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderId Int
  sender User @relation("sender", fields: [senderId], references: [id])
  recieverId Int
  receiver User @relation("reciever", fields: [recieverId], references: [id])
  title String @db.VarChar(255)
  message String @db.Text
}

enum ProjectUserPermission {
  NEEDS_APPROVAL
  EDITOR
  VIEWER
}

model ProjectUser {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  projectId Int
  owner Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  project Project @relation("users", fields: [projectId], references: [id])
  voteSubmit Boolean @default(false)
  permission ProjectUserPermission
  assignments ToDoAssignee[]
  checkedToDoItems ToDoItem[]
}

model Project {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  description String @db.VarChar(255)
  organization Organization @relation(fields: [orgId], references: [id])
  orgId Int
  users ProjectUser[] @relation("users")
  files File[]
  joinCode Int @unique
  projectTemplateId Int
  projectTemplate ProjectTemplate @relation(fields: [projectTemplateId], references: [id])
  toDoItems ToDoItem[]
  submissionDate DateTime?
  submitted Boolean @default(false)
}

model ProjectTemplate { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  description String @db.VarChar(255)
  deadline DateTime
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  projects Project[]

}

// project management items
model File {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  key String? @db.VarChar(255)
  project Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  link String @db.VarChar(255)
  size Int @default(0)
}

model ToDoItem {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  checked Boolean
  projectId Int
  project Project @relation(fields: [projectId], references: [id])
  checkedById Int?
  checkedBy ProjectUser? @relation(fields: [checkedById], references: [id], onDelete: SetNull)
  assignees ToDoAssignee[]
}

model ToDoAssignee {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  toDoItemId Int
  toDoItem ToDoItem @relation(fields: [toDoItemId], references: [id], onDelete: Cascade)
  userId Int
  projectUser ProjectUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String @db.VarChar(255)
  slug String @db.VarChar(255)
  summary String
  content String @db.Text
  authorId Int
  author User @relation(fields: [authorId], references: [id])
}
